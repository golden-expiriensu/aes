use std::array::TryFromSliceError;

const fn bit2byte(bits: usize) -> usize {
    assert!(bits % 8 == 0);
    bits / 8
}

const BLOCK_BIT_SIZE: usize = 128;
const WORD_LEN_BIT: usize = 32;
const WORD_LEN_BYTE: usize = bit2byte(WORD_LEN_BIT);

pub(crate) struct Key<const L: usize> {
    inner: [u8; L],
    #[allow(dead_code)]
    n_rounds: usize,
    n_words: usize,
}

impl<const L: usize> Key<L> {
    pub(crate) const fn new(key: [u8; L]) -> Self {
        let n_rounds = match L {
            16 => 10,
            24 => 12,
            32 => 14,
            _ => panic!("Supported key lengths: 16, 24 and 32 byte"),
        };

        Self {
            inner: key,
            n_rounds,
            n_words: L / WORD_LEN_BYTE,
        }
    }

    pub(crate) fn expand(self) -> Vec<Self> {
        let orig_key = self
            .inner
            .chunks_exact(self.n_words)
            .map(Word::try_from)
            .map(|r| r.unwrap())
            .collect::<Vec<Word>>();

        // AES requires a separate 128-bit round key block for each round plus one more.
        let n_words = (BLOCK_BIT_SIZE / WORD_LEN_BIT) * (self.n_rounds + 1);
        let mut words = Vec::with_capacity(n_words);

        for i in 0..n_words {
            let word = if i < self.n_words {
                orig_key[i]
            } else {
                if i % self.n_words == 0 {
                    xor(
                        words[i - self.n_words],
                        xor(sub_word(rot_word(words[i - 1])), rcon(i / self.n_words)),
                    )
                } else if self.n_words > 6 && i % self.n_words == 4 {
                    xor(words[i - self.n_words], sub_word(words[i - 1]))
                } else {
                    xor(words[i - self.n_words], words[i - 1])
                }
            };
            words.push(word);
        }

        words
            .into_iter()
            .flatten()
            .collect::<Vec<_>>()
            .chunks_exact(self.inner.len())
            .map(|chunk| chunk.try_into().unwrap())
            .collect::<Vec<_>>()
            .try_into()
            .unwrap()
    }
}

impl<const L: usize> TryFrom<&[u8]> for Key<L> {
    type Error = TryFromSliceError;

    fn try_from(value: &[u8]) -> Result<Self, Self::Error> {
        value.try_into().map(Self::new)
    }
}

type Word = [u8; WORD_LEN_BYTE];

/// Round constant as defined in here https://en.wikipedia.org/wiki/AES_key_schedule.
fn rcon(i: usize) -> Word {
    [rc(i), 0, 0, 0]
}

fn rc(i: usize) -> u8 {
    if i == 0 {
        panic!("Cannot derive round constant for an i = {i}")
    }
    if i == 1 {
        return 1;
    }

    let prev_rc = rc(i - 1);
    if prev_rc < 0x80 {
        2 * prev_rc
    } else {
        ((2 * prev_rc as u16) ^ 0x11B) as u8
    }
}

fn xor(a: Word, b: Word) -> Word {
    a.into_iter()
        .zip(b.into_iter())
        .map(|(a, b)| a ^ b)
        .collect::<Vec<_>>()
        .try_into()
        .unwrap()
}

fn rot_word(input: Word) -> Word {
    let mut input = input.clone();
    input.rotate_left(1);
    input
}

fn sub_word(input: Word) -> Word {
    input
        .into_iter()
        .map(sub_byte)
        .collect::<Vec<_>>()
        .try_into()
        .unwrap()
}

// Maps an 8-bit input to an 8-bit output using Rijndael S-box.
fn sub_byte(input: u8) -> u8 {
    let table: [u8; 256] = [
        0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab,
        0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4,
        0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71,
        0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2,
        0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6,
        0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb,
        0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45,
        0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5,
        0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44,
        0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a,
        0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49,
        0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d,
        0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25,
        0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e,
        0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1,
        0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb,
        0x16,
    ];
    table[input as usize]
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_rc() {
        let values: [u8; 10] = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36];
        for (i, value) in values.into_iter().enumerate() {
            assert_eq!(value, rc(i + 1))
        }
    }

    #[test]
    fn test_sub_byte() {
        assert_eq!(sub_byte(0x00), 0x63);
        assert_eq!(sub_byte(0x9a), 0xb8);
        assert_eq!(sub_byte(0xff), 0x16);
    }

    #[test]
    fn test_schedule() {
        let key = [
            0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6D, 0x79, 0x20, 0x4B, 0x75, 0x6E, 0x67, 0x20,
            0x46, 0x75,
        ];

        let rounds = [
            [
                0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6D, 0x79, 0x20, 0x4B, 0x75, 0x6E, 0x67, 0x20,
                0x46, 0x75,
            ],
            [
                0xE2, 0x32, 0xFC, 0xF1, 0x91, 0x12, 0x91, 0x88, 0xB1, 0x59, 0xE4, 0xE6, 0xD6, 0x79,
                0xA2, 0x93,
            ],
            [
                0x56, 0x08, 0x20, 0x07, 0xC7, 0x1A, 0xB1, 0x8F, 0x76, 0x43, 0x55, 0x69, 0xA0, 0x3A,
                0xF7, 0xFA,
            ],
            [
                0xD2, 0x60, 0x0D, 0xE7, 0x15, 0x7A, 0xBC, 0x68, 0x63, 0x39, 0xE9, 0x01, 0xC3, 0x03,
                0x1E, 0xFB,
            ],
            [
                0xA1, 0x12, 0x02, 0xC9, 0xB4, 0x68, 0xBE, 0xA1, 0xD7, 0x51, 0x57, 0xA0, 0x14, 0x52,
                0x49, 0x5B,
            ],
            [
                0xB1, 0x29, 0x3B, 0x33, 0x05, 0x41, 0x85, 0x92, 0xD2, 0x10, 0xD2, 0x32, 0xC6, 0x42,
                0x9B, 0x69,
            ],
            [
                0xBD, 0x3D, 0xC2, 0x87, 0xB8, 0x7C, 0x47, 0x15, 0x6A, 0x6C, 0x95, 0x27, 0xAC, 0x2E,
                0x0E, 0x4E,
            ],
            [
                0xCC, 0x96, 0xED, 0x16, 0x74, 0xEA, 0xAA, 0x03, 0x1E, 0x86, 0x3F, 0x24, 0xB2, 0xA8,
                0x31, 0x6A,
            ],
            [
                0x8E, 0x51, 0xEF, 0x21, 0xFA, 0xBB, 0x45, 0x22, 0xE4, 0x3D, 0x7A, 0x06, 0x56, 0x95,
                0x4B, 0x6C,
            ],
            [
                0xBF, 0xE2, 0xBF, 0x90, 0x45, 0x59, 0xFA, 0xB2, 0xA1, 0x64, 0x80, 0xB4, 0xF7, 0xF1,
                0xCB, 0xD8,
            ],
            [
                0x28, 0xFD, 0xDE, 0xF8, 0x6D, 0xA4, 0x24, 0x4A, 0xCC, 0xC0, 0xA4, 0xFE, 0x3B, 0x31,
                0x6F, 0x26,
            ],
        ];

        let round_keys = Key::<16>::new(key).expand();
        assert_eq!(rounds.len(), round_keys.len());

        for (i, (actual, expected)) in round_keys
            .into_iter()
            .zip(rounds.into_iter())
            .enumerate()
            .collect::<Vec<_>>()
        {
            assert_eq!(expected, actual.inner, "Invalid schedule for {i}th round");
        }
    }
}
