use crate::{sbox, xor, Block, BLOCK_LEN_BYTE};

mod schedule;

const WORD_LEN_BIT: usize = 32;
const WORD_LEN_BYTE: usize = WORD_LEN_BIT / 8;

type Word = [u8; WORD_LEN_BYTE];

pub struct Key<const L: usize> {
    inner: [u8; L],
    n_rounds: usize,
    n_words: usize,
}

impl<const L: usize> Key<L> {
    pub const fn new(key: [u8; L]) -> Self {
        let n_rounds = match L {
            16 => 10,
            24 => 12,
            32 => 14,
            _ => panic!("Supported key lengths: 16, 24 and 32 byte"),
        };

        Self {
            inner: key,
            n_rounds,
            n_words: L / WORD_LEN_BYTE,
        }
    }

    pub(crate) fn n_rounds(&self) -> usize {
        self.n_rounds
    }

    pub(crate) fn expand(self) -> Vec<Block> {
        assert!(self.inner.len() % WORD_LEN_BYTE == 0);
        let orig_key = self
            .inner
            .chunks_exact(WORD_LEN_BYTE)
            .map(Word::try_from)
            .map(|r| r.unwrap())
            .collect::<Vec<Word>>();

        // AES requires a separate 128-bit round key block for each round plus one more.
        let n_words = (BLOCK_LEN_BYTE / WORD_LEN_BYTE) * (self.n_rounds + 1);
        let mut words = Vec::with_capacity(n_words);

        for i in 0..n_words {
            let word = if i < self.n_words {
                orig_key[i]
            } else {
                if i % self.n_words == 0 {
                    xor(
                        words[i - self.n_words],
                        xor(
                            schedule::rot_word(words[i - 1]).map(sbox::sub_byte),
                            schedule::rcon(i / self.n_words),
                        ),
                    )
                } else if self.n_words > 6 && i % self.n_words == 4 {
                    xor(words[i - self.n_words], words[i - 1].map(sbox::sub_byte))
                } else {
                    xor(words[i - self.n_words], words[i - 1])
                }
            };
            words.push(word);
        }

        words
            .into_iter()
            .flatten()
            .collect::<Vec<_>>()
            .chunks_exact(BLOCK_LEN_BYTE)
            .map(|chunk| Block::try_from(chunk).unwrap())
            .collect::<Vec<Block>>()
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_expand_128() {
        let key = [
            0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6D, 0x79, 0x20, 0x4B, 0x75, 0x6E, 0x67, 0x20,
            0x46, 0x75,
        ];

        let rounds = [
            [
                0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6D, 0x79, 0x20, 0x4B, 0x75, 0x6E, 0x67, 0x20,
                0x46, 0x75,
            ],
            [
                0xE2, 0x32, 0xFC, 0xF1, 0x91, 0x12, 0x91, 0x88, 0xB1, 0x59, 0xE4, 0xE6, 0xD6, 0x79,
                0xA2, 0x93,
            ],
            [
                0x56, 0x08, 0x20, 0x07, 0xC7, 0x1A, 0xB1, 0x8F, 0x76, 0x43, 0x55, 0x69, 0xA0, 0x3A,
                0xF7, 0xFA,
            ],
            [
                0xD2, 0x60, 0x0D, 0xE7, 0x15, 0x7A, 0xBC, 0x68, 0x63, 0x39, 0xE9, 0x01, 0xC3, 0x03,
                0x1E, 0xFB,
            ],
            [
                0xA1, 0x12, 0x02, 0xC9, 0xB4, 0x68, 0xBE, 0xA1, 0xD7, 0x51, 0x57, 0xA0, 0x14, 0x52,
                0x49, 0x5B,
            ],
            [
                0xB1, 0x29, 0x3B, 0x33, 0x05, 0x41, 0x85, 0x92, 0xD2, 0x10, 0xD2, 0x32, 0xC6, 0x42,
                0x9B, 0x69,
            ],
            [
                0xBD, 0x3D, 0xC2, 0x87, 0xB8, 0x7C, 0x47, 0x15, 0x6A, 0x6C, 0x95, 0x27, 0xAC, 0x2E,
                0x0E, 0x4E,
            ],
            [
                0xCC, 0x96, 0xED, 0x16, 0x74, 0xEA, 0xAA, 0x03, 0x1E, 0x86, 0x3F, 0x24, 0xB2, 0xA8,
                0x31, 0x6A,
            ],
            [
                0x8E, 0x51, 0xEF, 0x21, 0xFA, 0xBB, 0x45, 0x22, 0xE4, 0x3D, 0x7A, 0x06, 0x56, 0x95,
                0x4B, 0x6C,
            ],
            [
                0xBF, 0xE2, 0xBF, 0x90, 0x45, 0x59, 0xFA, 0xB2, 0xA1, 0x64, 0x80, 0xB4, 0xF7, 0xF1,
                0xCB, 0xD8,
            ],
            [
                0x28, 0xFD, 0xDE, 0xF8, 0x6D, 0xA4, 0x24, 0x4A, 0xCC, 0xC0, 0xA4, 0xFE, 0x3B, 0x31,
                0x6F, 0x26,
            ],
        ];

        let round_keys = Key::<16>::new(key).expand();
        assert_eq!(rounds.len(), round_keys.len());

        for (i, (actual, expected)) in round_keys
            .into_iter()
            .zip(rounds.into_iter())
            .enumerate()
            .collect::<Vec<_>>()
        {
            assert_eq!(
                Block::try_from(expected).unwrap(),
                actual,
                "Invalid schedule for {i}th round"
            );
        }
    }

    #[test]
    fn test_expand_196() {
        let key = [
            0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6d, 0x79, 0x20, 0x4b, 0x75, 0x6e, 0x67, 0x20,
            0x46, 0x75, 0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6d, 0x79,
        ];

        let rounds = [
            [
                0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6d, 0x79, 0x20, 0x4b, 0x75, 0x6e, 0x67, 0x20,
                0x46, 0x75,
            ],
            [
                0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6d, 0x79, 0xe2, 0x54, 0xd7, 0xfb, 0x91, 0x74,
                0xba, 0x82,
            ],
            [
                0xb1, 0x3f, 0xcf, 0xec, 0xd6, 0x1f, 0x89, 0x99, 0x82, 0x77, 0xe8, 0xed, 0xf1, 0x57,
                0x85, 0x94,
            ],
            [
                0xbb, 0xc3, 0xf5, 0x5a, 0x2a, 0xb7, 0x4f, 0xd8, 0x9b, 0x88, 0x80, 0x34, 0x4d, 0x97,
                0x09, 0xad,
            ],
            [
                0xcf, 0xe0, 0xe1, 0x40, 0x3e, 0xb7, 0x64, 0xd4, 0x16, 0x80, 0xbd, 0xe8, 0x3c, 0x37,
                0xf2, 0x30,
            ],
            [
                0xa7, 0xbf, 0x72, 0x04, 0xea, 0x28, 0x7b, 0xa9, 0x25, 0xc8, 0x9a, 0xe9, 0x1b, 0x7f,
                0xfe, 0x3d,
            ],
            [
                0xcc, 0x3b, 0x9a, 0x47, 0xf0, 0x0c, 0x68, 0x77, 0x57, 0xb3, 0x1a, 0x73, 0xbd, 0x9b,
                0x61, 0xda,
            ],
            [
                0x98, 0x53, 0xfb, 0x33, 0x83, 0x2c, 0x05, 0x0e, 0xad, 0x50, 0x31, 0xab, 0x5d, 0x5c,
                0x59, 0xdc,
            ],
            [
                0x0a, 0xef, 0x43, 0xaf, 0xb7, 0x74, 0x22, 0x75, 0x2f, 0x27, 0xd9, 0x46, 0xac, 0x0b,
                0xdc, 0x48,
            ],
            [
                0xa6, 0xd6, 0x63, 0x3a, 0xfb, 0x8a, 0x3a, 0xe6, 0xf1, 0x65, 0x79, 0x49, 0x46, 0x11,
                0x5b, 0x3c,
            ],
            [
                0x69, 0x36, 0x82, 0x7a, 0xc5, 0x3d, 0x5e, 0x32, 0xc1, 0x8e, 0x40, 0x9c, 0x3a, 0x04,
                0x7a, 0x7a,
            ],
            [
                0xcb, 0x61, 0x03, 0x33, 0x8d, 0x70, 0x58, 0x0f, 0xe4, 0x46, 0xda, 0x75, 0x21, 0x7b,
                0x84, 0x47,
            ],
            [
                0x60, 0xd1, 0xe0, 0x61, 0x5a, 0xd5, 0x9a, 0x1b, 0x91, 0xb4, 0x99, 0x28, 0x1c, 0xc4,
                0xc1, 0x27,
            ],
        ];

        let round_keys = Key::<24>::new(key).expand();
        assert_eq!(rounds.len(), round_keys.len());

        for (i, (actual, expected)) in round_keys
            .into_iter()
            .zip(rounds.into_iter())
            .enumerate()
            .collect::<Vec<_>>()
        {
            assert_eq!(
                Block::try_from(expected).unwrap(),
                actual,
                "Invalid schedule for {i}th round"
            );
        }
    }

    #[test]
    fn test_expand_256() {
        let key = [
            0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6d, 0x79, 0x20, 0x4b, 0x75, 0x6e, 0x67, 0x20,
            0x46, 0x75, 0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6d, 0x79, 0x20, 0x4b, 0x75, 0x6e,
            0x62, 0x04, 0x67, 0x05,
        ];

        let rounds = [
            [
                0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6d, 0x79, 0x20, 0x4b, 0x75, 0x6e, 0x67, 0x20,
                0x46, 0x75,
            ],
            [
                0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6d, 0x79, 0x20, 0x4b, 0x75, 0x6e, 0x62, 0x04,
                0x67, 0x05,
            ],
            [
                0xa7, 0xed, 0x0a, 0xde, 0xd4, 0xcd, 0x67, 0xa7, 0xf4, 0x86, 0x12, 0xc9, 0x93, 0xa6,
                0x54, 0xbc,
            ],
            [
                0x88, 0x4c, 0x41, 0x11, 0xfb, 0x6c, 0x2c, 0x68, 0xdb, 0x27, 0x59, 0x06, 0xb9, 0x23,
                0x3e, 0x03,
            ],
            [
                0x83, 0x5f, 0x71, 0x88, 0x57, 0x92, 0x16, 0x2f, 0xa3, 0x14, 0x04, 0xe6, 0x30, 0xb2,
                0x50, 0x5a,
            ],
            [
                0x8c, 0x7b, 0x12, 0xaf, 0x77, 0x17, 0x3e, 0xc7, 0xac, 0x30, 0x67, 0xc1, 0x15, 0x13,
                0x59, 0xc2,
            ],
            [
                0xfa, 0x94, 0x54, 0xd1, 0xad, 0x06, 0x42, 0xfe, 0x0e, 0x12, 0x46, 0x18, 0x3e, 0xa0,
                0x16, 0x42,
            ],
            [
                0x3e, 0x9b, 0x55, 0x83, 0x49, 0x8c, 0x6b, 0x44, 0xe5, 0xbc, 0x0c, 0x85, 0xf0, 0xaf,
                0x55, 0x47,
            ],
            [
                0x8b, 0x68, 0xf4, 0x5d, 0x26, 0x6e, 0xb6, 0xa3, 0x28, 0x7c, 0xf0, 0xbb, 0x16, 0xdc,
                0xe6, 0xf9,
            ],
            [
                0x79, 0x1d, 0xdb, 0x1a, 0x30, 0x91, 0xb0, 0x5e, 0xd5, 0x2d, 0xbc, 0xdb, 0x25, 0x82,
                0xe9, 0x9c,
            ],
            [
                0x88, 0x76, 0x2a, 0x62, 0xae, 0x18, 0x9c, 0xc1, 0x86, 0x64, 0x6c, 0x7a, 0x90, 0xb8,
                0x8a, 0x83,
            ],
            [
                0x19, 0x71, 0xa5, 0xf6, 0x29, 0xe0, 0x15, 0xa8, 0xfc, 0xcd, 0xa9, 0x73, 0xd9, 0x4f,
                0x40, 0xef,
            ],
            [
                0x2c, 0x7f, 0xf5, 0x57, 0x82, 0x67, 0x69, 0x96, 0x04, 0x03, 0x05, 0xec, 0x94, 0xbb,
                0x8f, 0x6f,
            ],
            [
                0x3b, 0x9b, 0xd6, 0x5e, 0x12, 0x7b, 0xc3, 0xf6, 0xee, 0xb6, 0x6a, 0x85, 0x37, 0xf9,
                0x2a, 0x6a,
            ],
            [
                0xf5, 0x9a, 0xf7, 0xcd, 0x77, 0xfd, 0x9e, 0x5b, 0x73, 0xfe, 0x9b, 0xb7, 0xe7, 0x45,
                0x14, 0xd8,
            ],
        ];

        let round_keys = Key::<32>::new(key).expand();
        assert_eq!(rounds.len(), round_keys.len());

        for (i, (actual, expected)) in round_keys
            .into_iter()
            .zip(rounds.into_iter())
            .enumerate()
            .collect::<Vec<_>>()
        {
            assert_eq!(
                Block::try_from(expected).unwrap(),
                actual,
                "Invalid schedule for {i}th round"
            );
        }
    }
}
